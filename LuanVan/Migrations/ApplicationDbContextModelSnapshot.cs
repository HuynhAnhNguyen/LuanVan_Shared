// <auto-generated />
using System;
using LuanVan.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LuanVan.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LuanVan.Models.ChiTietHd", b =>
                {
                    b.Property<string>("MaChiTietHd")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaGioHang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaHoaDon")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaChiTietHd");

                    b.HasIndex("MaGioHang");

                    b.HasIndex("MaHoaDon");

                    b.ToTable("ChiTietHD", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.GioHang", b =>
                {
                    b.Property<string>("MaGioHang")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KhachHangId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaSanPham")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SoLuongDat")
                        .HasColumnType("int");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("MaGioHang");

                    b.HasIndex("KhachHangId");

                    b.HasIndex("MaSanPham");

                    b.ToTable("GioHang", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.HoaDon", b =>
                {
                    b.Property<string>("MaHoaDon")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KhachHangId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaKm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaPttt")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NgayXuatHd")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TongGiaTri")
                        .HasColumnType("float");

                    b.Property<int>("TrangThaiDonHang")
                        .HasColumnType("int");

                    b.Property<int>("TrangThaiThanhToan")
                        .HasColumnType("int");

                    b.HasKey("MaHoaDon");

                    b.HasIndex("KhachHangId");

                    b.HasIndex("MaKm");

                    b.HasIndex("MaPttt");

                    b.ToTable("HoaDon", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.KhachHang", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisableAccount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GioiTinh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoKhachHang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenKhachHang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("KhachHang", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.KhuyenMai", b =>
                {
                    b.Property<string>("MaKm")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GiaTriKm")
                        .HasColumnType("float");

                    b.Property<DateTime>("NgayBatDau")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NgayKetThuc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SoLuongConLai")
                        .HasColumnType("int");

                    b.Property<string>("TenKhuyenMai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaKm");

                    b.ToTable("KhuyenMai", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.LoaiSanPham", b =>
                {
                    b.Property<string>("MaLoaiSp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenLoaiSp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaLoaiSp");

                    b.ToTable("LoaiSanPham", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.MauSac", b =>
                {
                    b.Property<string>("MaMau")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenMau")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaMau");

                    b.ToTable("MauSac", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.NhaSanXuat", b =>
                {
                    b.Property<string>("MaNsx")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenNsx")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaNsx");

                    b.ToTable("NhaSanXuat", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.SanPham", b =>
                {
                    b.Property<string>("MaSanPham")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("GiaBan")
                        .HasColumnType("bigint");

                    b.Property<string>("HinhAnh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaLoaiSp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaMau")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaNsx")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuongDaBan")
                        .HasColumnType("int");

                    b.Property<int>("SoLuongTon")
                        .HasColumnType("int");

                    b.Property<string>("TenDvt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenSanPham")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("int");

                    b.HasKey("MaSanPham");

                    b.HasIndex("MaLoaiSp");

                    b.HasIndex("MaMau");

                    b.HasIndex("MaNsx");

                    b.ToTable("SanPham", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.ThanhToan", b =>
                {
                    b.Property<string>("MaPttt")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenPttt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaPttt");

                    b.ToTable("ThanhToan", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LuanVan.Models.ChiTietHd", b =>
                {
                    b.HasOne("LuanVan.Models.GioHang", "GioHang")
                        .WithMany("ChiTietHds")
                        .HasForeignKey("MaGioHang");

                    b.HasOne("LuanVan.Models.HoaDon", "HoaDon")
                        .WithMany("ChiTietHds")
                        .HasForeignKey("MaHoaDon");

                    b.Navigation("GioHang");

                    b.Navigation("HoaDon");
                });

            modelBuilder.Entity("LuanVan.Models.GioHang", b =>
                {
                    b.HasOne("LuanVan.Models.KhachHang", "KhachHang")
                        .WithMany("GioHangs")
                        .HasForeignKey("KhachHangId");

                    b.HasOne("LuanVan.Models.SanPham", "SanPham")
                        .WithMany("GioHangs")
                        .HasForeignKey("MaSanPham");

                    b.Navigation("KhachHang");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("LuanVan.Models.HoaDon", b =>
                {
                    b.HasOne("LuanVan.Models.KhachHang", "KhachHang")
                        .WithMany("HoaDons")
                        .HasForeignKey("KhachHangId");

                    b.HasOne("LuanVan.Models.KhuyenMai", "KhuyenMai")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaKm");

                    b.HasOne("LuanVan.Models.ThanhToan", "ThanhToan")
                        .WithMany("HoaDons")
                        .HasForeignKey("MaPttt");

                    b.Navigation("KhachHang");

                    b.Navigation("KhuyenMai");

                    b.Navigation("ThanhToan");
                });

            modelBuilder.Entity("LuanVan.Models.SanPham", b =>
                {
                    b.HasOne("LuanVan.Models.LoaiSanPham", "LoaiSp")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaLoaiSp");

                    b.HasOne("LuanVan.Models.MauSac", "MauSac")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaMau");

                    b.HasOne("LuanVan.Models.NhaSanXuat", "Nsx")
                        .WithMany("SanPhams")
                        .HasForeignKey("MaNsx");

                    b.Navigation("LoaiSp");

                    b.Navigation("MauSac");

                    b.Navigation("Nsx");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LuanVan.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LuanVan.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LuanVan.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LuanVan.Models.KhachHang", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LuanVan.Models.GioHang", b =>
                {
                    b.Navigation("ChiTietHds");
                });

            modelBuilder.Entity("LuanVan.Models.HoaDon", b =>
                {
                    b.Navigation("ChiTietHds");
                });

            modelBuilder.Entity("LuanVan.Models.KhachHang", b =>
                {
                    b.Navigation("GioHangs");

                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("LuanVan.Models.KhuyenMai", b =>
                {
                    b.Navigation("HoaDons");
                });

            modelBuilder.Entity("LuanVan.Models.LoaiSanPham", b =>
                {
                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("LuanVan.Models.MauSac", b =>
                {
                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("LuanVan.Models.NhaSanXuat", b =>
                {
                    b.Navigation("SanPhams");
                });

            modelBuilder.Entity("LuanVan.Models.SanPham", b =>
                {
                    b.Navigation("GioHangs");
                });

            modelBuilder.Entity("LuanVan.Models.ThanhToan", b =>
                {
                    b.Navigation("HoaDons");
                });
#pragma warning restore 612, 618
        }
    }
}
